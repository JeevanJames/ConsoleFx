<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ConsoleFx.ConsoleExtensions</name>
    </assembly>
    <members>
        <member name="T:ConsoleFx.ConsoleExtensions.ColorString">
            <summary>
            Represents a string that includes color information.
            </summary>
            <remarks>
            Internally, this class maintains a collection of text blocks, each with color information.
            </remarks>
        </member>
        <member name="M:ConsoleFx.ConsoleExtensions.ColorString.Text(System.String,System.Nullable{ConsoleFx.ConsoleExtensions.CColor},System.Nullable{ConsoleFx.ConsoleExtensions.CColor})">
            <summary>
            <para>Adds the text to the color string with the specified foreground and background colors.</para>
            <para>The colors are optional and if not specified, they retain whatever values they were before.</para>
            <para>Unless you want to dynamically specify the colors, prefer using the color-specified methods like <see cref="M:ConsoleFx.ConsoleExtensions.ColorString.Red(System.String)"/>.</para>
            </summary>
            <param name="text">The text to add to the color string.</param>
            <param name="foreColor">Optional foreground color for the text.</param>
            <param name="backColor">Optional background color for the text.</param>
            <returns>The current instance of <see cref="T:ConsoleFx.ConsoleExtensions.ColorString"/>.</returns>
        </member>
        <member name="M:ConsoleFx.ConsoleExtensions.ColorString.Reset(System.String)">
            <summary>
            Resets the foreground color.
            </summary>
            <param name="text">Optional text to append to the color string after resetting the foreground color.</param>
            <returns>The current instance of <see cref="T:ConsoleFx.ConsoleExtensions.ColorString"/>.</returns>
        </member>
        <member name="M:ConsoleFx.ConsoleExtensions.ColorString.BgReset(System.String)">
            <summary>
            Resets the background color.
            </summary>
            <param name="text">Optional text to append to the color string after resetting the background color.</param>
            <returns>The current instance of <see cref="T:ConsoleFx.ConsoleExtensions.ColorString"/>.</returns>
        </member>
        <member name="M:ConsoleFx.ConsoleExtensions.ColorString.ToString">
            <summary>
            Builds a string representing the text blocks defined in the object.
            </summary>
            <returns>A color string.</returns>
        </member>
        <member name="M:ConsoleFx.ConsoleExtensions.ColorString.TryParse(System.String,ConsoleFx.ConsoleExtensions.ColorString@)">
            <summary>
            Creates an instance of a <see cref="T:ConsoleFx.ConsoleExtensions.ColorString"/> from the specified color string.
            </summary>
            <param name="cstr">The color string to parse</param>
            <param name="colorStr">The new <see cref="T:ConsoleFx.ConsoleExtensions.ColorString"/> instance created from the color string.</param>
            <returns>True, if the color string could be parsed and a <see cref="T:ConsoleFx.ConsoleExtensions.ColorString"/> instance created; otherwise false.</returns>
        </member>
        <member name="T:ConsoleFx.ConsoleExtensions.ColorStringBlock">
            <summary>
            Represents a colored text block in a <see cref="T:ConsoleFx.ConsoleExtensions.ColorString"/> instance.
            </summary>
        </member>
        <member name="M:ConsoleFx.ConsoleExtensions.ConsoleEx.ClearCurrentLine">
            <summary>
            Clears the contents of the current line and resets the cursor position to the start of the line.
            </summary>
        </member>
        <member name="M:ConsoleFx.ConsoleExtensions.ConsoleEx.Print(ConsoleFx.ConsoleExtensions.ColorString)">
            <summary>
            Writes a <see cref="T:ConsoleFx.ConsoleExtensions.ColorString"/> object to the console.
            </summary>
            <param name="message">The <see cref="T:ConsoleFx.ConsoleExtensions.ColorString"/> object to write.</param>
        </member>
        <member name="M:ConsoleFx.ConsoleExtensions.ConsoleEx.PrintLine(ConsoleFx.ConsoleExtensions.ColorString[])">
            <summary>
            Writes one or more <see cref="T:ConsoleFx.ConsoleExtensions.ColorString"/> objects to the console.
            </summary>
            <param name="messages">The <see cref="T:ConsoleFx.ConsoleExtensions.ColorString"/> objects to write.</param>
        </member>
        <member name="M:ConsoleFx.ConsoleExtensions.ConsoleEx.PrintBlank(System.Int32)">
            <summary>
                Writes one or more blank lines to the Console.
                <para/>
                Just a more descriptive way to do a <code>Console.WriteLine()</code>.
            </summary>
            <param name="count">The number of blank lines to write.</param>
        </member>
        <member name="M:ConsoleFx.ConsoleExtensions.ConsoleEx.PrintIndented(System.Int32,System.String[])">
            <summary>
                Writes multiple lines to the console, with each line being left-aligned to the specified indent.
            </summary>
            <param name="indent">The indent to left align each line.</param>
            <param name="lines">The lines to write.</param>
        </member>
        <member name="M:ConsoleFx.ConsoleExtensions.ConsoleEx.PrintIndented(System.String,System.Int32,System.Boolean)">
            <summary>
                Writes a long piece of text to the console such that each new line is left-aligned to the same indent.
            </summary>
            <param name="text">The text to write.</param>
            <param name="indent">The indent to left align the text.</param>
            <param name="indentFirstLine">
                Whether the first line should be indented or just written from the current cursor
                position.
            </param>
        </member>
        <member name="M:ConsoleFx.ConsoleExtensions.ConsoleEx.Prompt(ConsoleFx.ConsoleExtensions.ColorString)">
            <summary>
                Displays a message and waits for user input.
            </summary>
            <param name="message">A string or color string representing the message to be displayed</param>
            <returns>The input entered by the user</returns>
        </member>
        <member name="M:ConsoleFx.ConsoleExtensions.ConsoleEx.Prompt(System.Func{System.String,System.Boolean})">
            <summary>
            Accepts user input and validates the input with the specified validator.
            If the input is not valid, the entered text is cleared and user prompted to enter the input again.
            </summary>
            <param name="validator">Function to validate the input text</param>
            <returns>The input entered by the user</returns>
        </member>
        <member name="P:ConsoleFx.ConsoleExtensions.ConsoleEx.SecretMask">
            <summary>
                Gets or sets the character to be used when entering a secret value using the ReadSecret methods. The default is '*'.
                <para/>
                Changing this value applies globally.
            </summary>
        </member>
        <member name="M:ConsoleFx.ConsoleExtensions.ConsoleEx.ReadSecret(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Reads a stream of characters from standard output, but obscures the entered characters
                with a mask character.
            </summary>
            <param name="hideCursor">If true, hides the cursor while the characters are being input.</param>
            <param name="hideMask">If true, prevents the mask character from being shown.</param>
            <param name="needValue">If true, at least one character must be entered.</param>
            <returns>The entered stream of characters as a string.</returns>
        </member>
        <member name="M:ConsoleFx.ConsoleExtensions.ConsoleEx.ReadSecret(ConsoleFx.ConsoleExtensions.ColorString,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Displays a text prompt, and then reads a stream of characters from standard output,
                but obscures the entered characters with a mask character.
            </summary>
            <param name="prompt">The text prompt to display.</param>
            <param name="hideCursor">If true, hides the cursor while the characters are being input.</param>
            <param name="hideMask">If true, prevents the mask character from being shown.</param>
            <param name="needValue">If true, at least one character must be entered.</param>
            <returns>The entered stream of characters as a string.</returns>
        </member>
        <member name="M:ConsoleFx.ConsoleExtensions.ConsoleEx.ReadSecretCommon``2(System.Func{``1},System.Action{``1,System.Char},System.Func{``1,System.Int32},System.Func{``1,``0},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Common method used by both the <see cref="M:ConsoleFx.ConsoleExtensions.ConsoleEx.ReadSecret(System.Boolean,System.Boolean,System.Boolean)"/> and <see cref="M:ConsoleFx.ConsoleExtensions.ConsoleEx.ReadSecretSecure(System.Boolean,System.Boolean,System.Boolean)"/> methods to receive a secret input from the user.
            </summary>
            <typeparam name="TResult">The type of the resultant secret.</typeparam>
            <typeparam name="TAccumulator">The type of the accumulator, used to incrementally build the resultant secret (could be the same type as the result).</typeparam>
            <param name="accumulatorFactory">Function to create the accumulator type.</param>
            <param name="accumulatorAppender">Function to append a single entered character to the accumulator.</param>
            <param name="getAccumulatorLength">Function to retrieve the current length of the accumulator.</param>
            <param name="resultExtractor">Function to extract the final result from the accumulator.</param>
            <param name="hideCursor">If true, hides the cursor while the characters are being input.</param>
            <param name="hideMask">If true, prevents the mask character from being shown.</param>
            <param name="needValue">If true, at least one character must be entered.</param>
            <returns>The entered data.</returns>
        </member>
        <member name="M:ConsoleFx.ConsoleExtensions.ConsoleEx.WaitForEnter">
            <summary>
                Waits for the user to press the ENTER (RETURN) key
            </summary>
        </member>
        <member name="M:ConsoleFx.ConsoleExtensions.ConsoleEx.WaitForAnyKey">
            <summary>
                Waits for the user to press any key on the keyboard. Displays the character representing
                the pressed key in the console window.
            </summary>
            <returns>Information about the pressed key</returns>
        </member>
        <member name="M:ConsoleFx.ConsoleExtensions.ConsoleEx.WaitForKeys(System.Char[])">
            <summary>
                Waits for any of a specified set of keys to be pressed by the user.
            </summary>
            <param name="keys">An array of characters representing the allowed set of characters.</param>
            <returns>The character pressed by the user</returns>
        </member>
        <member name="M:ConsoleFx.ConsoleExtensions.ConsoleEx.WaitForKeys(System.Boolean,System.Char[])">
            <summary>
                Waits for any of a specified set of keys to be pressed by the user.
            </summary>
            <param name="ignoreCase">Indicates whether to the keys pressed are case sensitive.</param>
            <param name="keys">An array of characters representing the allowed set of characters.</param>
            <returns>The character pressed by the user</returns>
        </member>
        <member name="M:ConsoleFx.ConsoleExtensions.ConsoleEx.WaitForKeys(System.ConsoleKey[])">
            <summary>
                Waits for any of a specified set of keys to be pressed by the user.
            </summary>
            <param name="keys">An array of ConsoleKey objects representing the allowed set of keys.</param>
            <returns>The key pressed by the user</returns>
        </member>
        <member name="M:ConsoleFx.ConsoleExtensions.ConsoleEx.WaitForKeysLoop(System.Collections.Generic.IEnumerable{ConsoleFx.ConsoleExtensions.KeyHandler},System.Action{System.ConsoleKey},System.Collections.Generic.IEnumerable{System.ConsoleKey})">
            <summary>
            <para>Repeatedly prompts the user for a key press, until any of the specified escape keys are pressed.</para>
            <para>If the pressed key if available in the specified handlers, the corresponding handler is called. If not, it is ignored and the loop continues.</para>
            </summary>
            <param name="handlers">Collection of keys to handle and their handlers.</param>
            <param name="postKeyPress">Optional action to run after any key press, not counting the ignored keys and escape keys.</param>
            <param name="escapeKeys">The keys that will break the loop. If not specified, defaults to the escape key.</param>
        </member>
        <member name="T:ConsoleFx.ConsoleExtensions.KeyHandler">
            <summary>
            Represents a handler for a key press in the <see cref="M:ConsoleFx.ConsoleExtensions.ConsoleEx.WaitForKeysLoop(System.Collections.Generic.IEnumerable{ConsoleFx.ConsoleExtensions.KeyHandler},System.Action{System.ConsoleKey},System.Collections.Generic.IEnumerable{System.ConsoleKey})"/> method.
            </summary>
        </member>
        <member name="P:ConsoleFx.ConsoleExtensions.KeyHandler.Key">
            <summary>
            Gets the key to handle.
            </summary>
        </member>
        <member name="P:ConsoleFx.ConsoleExtensions.KeyHandler.Action">
            <summary>
            Gets the handler to call when the key is pressed.
            </summary>
        </member>
        <member name="M:ConsoleFx.ConsoleExtensions.ConsoleKeyExtensions.HandledBy(System.ConsoleKey,System.Action{System.ConsoleKey})">
            <summary>
            Provides a fluid way to create a <see cref="T:ConsoleFx.ConsoleExtensions.KeyHandler"/> instance when using the
            <see cref="M:ConsoleFx.ConsoleExtensions.ConsoleEx.WaitForKeysLoop(System.Collections.Generic.IEnumerable{ConsoleFx.ConsoleExtensions.KeyHandler},System.Action{System.ConsoleKey},System.Collections.Generic.IEnumerable{System.ConsoleKey})"/> method.
            </summary>
            <param name="key">The key to handle.</param>
            <param name="action">The handler to call when the key is pressed.</param>
            <returns>An instance of the <see cref="T:ConsoleFx.ConsoleExtensions.KeyHandler"/> class.</returns>
        </member>
        <member name="T:ConsoleFx.ConsoleExtensions.ProgressBar">
            <summary>
            Represents a console progress bar.
            </summary>
        </member>
        <member name="M:ConsoleFx.ConsoleExtensions.ProgressBar.#ctor(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Char,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:ConsoleFx.ConsoleExtensions.ProgressBar"/> class.
            </summary>
            <param name="value">The starting value of the progress bar. Defaults to the minimum value.</param>
            <param name="minValue">The minimum value of the progress bar.</param>
            <param name="maxValue">The maximum value of the progress bar.</param>
            <param name="line">The line to start rendering the progress bar. Defaults to the current cursor location.</param>
            <param name="column">The column to start rendering the progress bar. Defaults to the current cursor location.</param>
            <param name="barChar">The character to render the progress bar.</param>
            <param name="fillChar">The character to render the progress part of the progress bar.</param>
        </member>
    </members>
</doc>
